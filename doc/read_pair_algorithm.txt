Algorithm to extend contigs using the read pair information. 

A supernode is a set of nodes which are all connected and the number of edges of each internal node is exactly one in each direction. The first and last node must have 1 edge in one orientation and any number of edges in the opposite orientation, except 1. 
The in edges is the count of edges that lead to the current node in the direction of the walk
The out edges is the count of edges that exit the current node in the direction of the walk. 
A contig is a set of connected nodes where all the internal nodes have a count of 1 out edges, and 1 or more in edges. The first node is either blunt or it has more than 1 in connections. The last node is either blunt or it has more than 1 out edges. 

Stage 1. Mark all the supernodes
1. From an arbitrary node, walk in an arbitrary direction until the count of in or out edges are different to 1. Do the same in the opposite direction from the original starting node. 
2. Mark all the nodes in both paths as a single supernode.

Stage 2. Enrich with the read pairs. 
1. For each pair of reads. 
	1.1 Get the IDs of all the supernodes covered by the read/pair and mark them as connected by an increment of 1 in the "connection coverage".
	1.2 If the first node of the first read and the last node on the second read are in the same supernode, don't increment the connection coverage, but walk to figure out the expected distance in the sample
	
Stage 3. Walking
1. Get a contig. 
2. If the last node of the contig has more than 1 out nodes, and the distance between the last node and the previous node with more than 1 in node is shorter than the average distance between the pairs
	2.1 Walk each one of the out nodes up to twice the average distance between reads in a pair. 
	2.2 Score the possible routes by comparing the connection coverage of the possible routes with the supernodes in the range of the distance pair distance
